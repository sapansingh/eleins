import 'dart:convert';

import 'package:eleins/apiurl.dart';
import 'package:eleins/modelpage/healthstatus.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class Usercreate extends StatefulWidget {
  const Usercreate({super.key});

  @override
  State<Usercreate> createState() => _UsercreateState();
}

class _UsercreateState extends State<Usercreate> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
   DateTime? _selectedDate;
  String? _selectedGender;

  String host=api().apiserve;
  List<Health_Status> hstatus=[];
TextEditingController _Userid=TextEditingController();
TextEditingController _Username=TextEditingController();
TextEditingController _password=TextEditingController();
TextEditingController _mobileno=TextEditingController();
TextEditingController _mailid=TextEditingController();
TextEditingController _adharid=TextEditingController();
TextEditingController _userroll=TextEditingController();
TextEditingController _partyid=TextEditingController();
TextEditingController _isactive=TextEditingController();
TextEditingController _consitunid=TextEditingController();
TextEditingController _state=TextEditingController();
TextEditingController _city=TextEditingController();

@override
  void initState() {
    // TODO: implement initState
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(appBar: AppBar(title: Text("User Creation"),),body: Form(
      key:_formKey ,
      child: SingleChildScrollView(child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            _buildTextFormField("Userid", TextInputType.text, _Userid),
          _buildTextFormField("Username", TextInputType.text, _Username),
          _buildTextFormField("Userpassword", TextInputType.text, _password),
          _buildTextFormField("Mobile Number", TextInputType.text, _mobileno),
          _buildTextFormField("Mail Id", TextInputType.text, _mailid),
          _buildTextFormField("Adharcard No", TextInputType.text, _adharid),
           _buildDropdownFormFields("Party Name",[],_partyid),
         _buildDropdownFormFields("User Roll",[],_userroll),
           _buildDropdownFormField("id active",['select','Y','N'],_isactive),
             _buildDropdownFormFields("State",[],_state),
               _buildDropdownFormFields("City",[],_city),
                 _buildDropdownFormFields("consitiuncy",[],_consitunid),
                
           SizedBox(height: 20.0),
                    ElevatedButton(
                      onPressed: () {
                        if (_formKey.currentState != null &&
                            _formKey.currentState!.validate()) {
                          // Form is valid, submit data
                          _submitForm();
                        }
                      },
                      child: Text('Submit'),
                    ),
          
          
          ],),
      ),),
    ),);


  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      // Construct the JSON payload
      var payload = {
        'Userid': _voterIdController.text,
        'Username': _nameController.text,
        'Mobile user': _fatherNameController.text,
        'Age': _ageController.text,
        'gender': _gendController.text,
        'dob': _dobController.text,
        'address': _addressController.text,
        'qualification': _qualificationController.text,
        'isalone': _isLivingAloneController.text,
        'nooffm':_noOfFamilyMembersController.text,
        'whatsupno':_whatsappNoController.text,
        'othernumber': _otherMobNoController.text,
        'email':_emailController.text,
        'native_address':_nativeAddressController.text,
        'category':_categoryController.text,
        'Occupation_Activity':_occupationActivityController.text,
        'Health_Status':_healthSatatusController.text,
        'Disabilities':_disabilitiesController.text,
        'Type_of_Stay':_typeOfStayController.text,
        'visit_to_home':_visitToHomeController.text,
        'Blood_Group':_bloodGroupController.text,
        'setis_withfovt':_satisFiedWithGovWorkController.text,



      };



      // Convert payload to JSON format
      var jsonPayload = jsonEncode(payload);

      print(jsonPayload);
      // Send POST request
      var response = await http.post(
        Uri.parse('$host/index.php'),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonPayload,
      );

      // Check response status
      if (response.statusCode == 200) {

        Map<String,dynamic>  respinse=jsonDecode(response.body);
        print('Form submitted successfully');
          
    print(respinse['status']);
    if(respinse['status']){
  toastification.show(
  context: context,
   type: ToastificationType.success,
  style: ToastificationStyle.fillColored,
  title: Text('Servey completed!'),
  autoCloseDuration: const Duration(seconds: 3),

 
);
   // ignore: use_build_context_synchronously
   Navigator.pop(context);
    
    }else{

          toastification.show(
  context: context,
   type: ToastificationType.error,
  style: ToastificationStyle.fillColored,
  title: Text('Servey not completed!'),
  autoCloseDuration: const Duration(seconds: 3),
);
   
      
    }

        // Handle successful response
      } else {
          toastification.show(
  context: context,
   type: ToastificationType.error,
  style: ToastificationStyle.fillColored,
  title: Text('Servey completed!'),
  autoCloseDuration: const Duration(seconds: 3),
);
        print('Failed to submit form: ${response.statusCode}');
        // Handle error response
      }
    }
  }



 Widget _buildTextFormField(String labelText, TextInputType keyboardType,
      TextEditingController control) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        decoration: InputDecoration(
          labelText: labelText,
          border: OutlineInputBorder()
        ),
        controller: control,
        keyboardType: keyboardType,
        validator: (value) {
          if (value!.isEmpty) {
            return 'Please enter $labelText';
          }
          return null;
        },
      ),
    );
  } 

 Widget _buildDropdownFormField(
      String? labelText, List<String> options, TextEditingController contr) {
    _selectedGender = options.first;
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: labelText,
          border: const OutlineInputBorder(),
        ),
        value: _selectedGender,
        onChanged: (String? newValue) {
          setState(() {
            _selectedGender = newValue;
            contr.text = _selectedGender.toString();
            print(contr.text);
          });
        },
        validator: (value) {
          if (value == 'select' || value =="") {
            return 'please select  $labelText';
          }
        },
        items: options.map<DropdownMenuItem<String>>((String value) {
          return DropdownMenuItem<String>(
            value: value.toString(),
            child: Text(value),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildDropdownFormFields(
      String? labelText, List<Health_Status> options, TextEditingController contr) {
     Health_Status? _selectedModel;  
    return Padding(
     padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: DropdownButtonFormField<Health_Status>(
        decoration: InputDecoration(
          labelText: labelText,
          border: OutlineInputBorder(),
        ),
        value: _selectedModel,
        onChanged: (Health_Status? newValue) {
          setState(() {
            _selectedModel = newValue;
                 contr.text =newValue!.id.toString();
             if(labelText=="State"){
     
         //   _getcity(_stateIdController.text);
             }
            print(contr.text);
          });
        },
        validator: (value) {
          if (value =="") {
            return 'please select  $labelText';
          }
        },
        items: options.map<DropdownMenuItem<Health_Status>>((Health_Status model) {
          return DropdownMenuItem<Health_Status>(
            value: model,
            child: Text(model.hstatus!.toString()),
          );
        }).toList(),
      ),
    );
  }



  Widget _buildDateFormField(
      String labelText, TextEditingController dobController) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Expanded(
            child: Text(
              labelText,
              style: TextStyle(fontSize: 16.0),
            ),
          ),
          OutlinedButton(
            onPressed: () {
              _selectDate(context);
            },
            child: Text(
              _selectedDate != null
                  ? dobController.text =
                      '${_selectedDate!.year}-${_selectedDate!.month}-${_selectedDate!.day}'
                  : 'Select Date',
              style: TextStyle(color: Colors.blue),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );

    if (pickedDate != null && pickedDate != _selectedDate) {
      setState(() {
        _selectedDate = pickedDate;
      });
    }
  }





}